from airflow.decorators import dag, task
from airflow.providers.postgres.hooks.postgres import PostgresHook
from datetime import datetime, timedelta
import requests

default_args = {
    'owner': 'airflow',
    'retries': 2,
    'retry_delay': timedelta(minutes=2)
}

# üîÅ Parent ID Mapping
PARENT_MAP = {
    '–ñ–∏–º—Å, –•“Ø–Ω—Å–Ω–∏–π –Ω–æ–≥–æ–æ': 1,
    '”®–¥”©—Ä —Ç—É—Ç–º—ã–Ω —à–∏–Ω—ç —Ö“Ø–Ω—Å': 2,
    '–ê–º—Ç—Ç–∞–Ω': 3,
    '–ë–æ–ª–æ–≤—Å—Ä—É—É–ª—Å–∞–Ω —Ö“Ø–Ω—Å': 4,
    '–®–∏–Ω–≥—ç–Ω —Ö“Ø–Ω—Å': 5,
    '–ì–æ–æ —Å–∞–π—Ö–∞–Ω': 6,
    '–•“Ø“Ø—Ö–¥–∏–π–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω': 7,
    '–ê—è–ª–∞–ª –°–ø–æ—Ä—Ç—ã–Ω –±–∞—Ä–∞–∞': 8,
    '–ë–∏—á–∏–≥, —Å–æ—ë–ª—ã–Ω –±–∞—Ä–∞–∞': 9,
    '–¶–∞—Ö–∏–ª–≥–∞–∞–Ω –±–∞—Ä–∞–∞': 10,
    '–ë–∞–≥–∞–∂ —Ö—ç—Ä—ç–≥—Å—ç–ª': 11,
    '–ì—ç—Ä –ê—Ö—É–π': 1,
    '–ë—ç–ª—ç–≥ –¥—É—Ä—Å–≥–∞–ª, —á–∏–º—ç–≥–ª—ç–ª': 13,
    '–¢–æ–≥–ª–æ–æ–º': 14,
    '–¢—ç–∂—ç—ç–≤—ç—Ä –∞–º—å—Ç–Ω—ã —Ö—ç—Ä—ç–≥—Å—ç–ª': 341,
    '–ú–∞—Ö –º–∞—Ö–∞–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω': 740,
    '–î–∞—Ä—à–∏–ª—Å–∞–Ω, –Ω”©”©—à–∏–ª—Å”©–Ω —Ö“Ø–Ω—Å': 29,
    '–•”©–ª–¥”©”©—Å”©–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω': 696,
    'Starlink': 782,
    '–≠—Ä“Ø“Ø–ª –º—ç–Ω–¥–∏–π–Ω —Ö“Ø–Ω—Å': 344,
    '–ë—ç–ª—ç–Ω —Ö—É–≤—Ü–∞—Å': 455,
    '–ê—Ö—É–π–Ω –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω': 78,
    'Beauty': 745
}

API_URL = "https://restapi.emartmall.mn:10443/mn/api/category/menu"

@dag(
    dag_id="category_api_to_postgres",
    default_args=default_args,
    schedule=None,
    start_date=datetime(2025, 1, 1),
    catchup=False,
    tags=["emart", "category"]
)
def category_etl():

    @task()
    def extract_categories():
        response = requests.get(API_URL)
        response.raise_for_status()
        data = response.json()["data"]
        
        # –ó”©–≤—Ö”©–Ω —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ö—ç—Å–≥–∏–π–≥ –∞–≤–∞—Ö
        result = []
        for item in data:
            parent_id = item.get("parentid")
            
            result.append({
                "id": item["id"],
                "name": item["name"],
                "route": item["route"],
                "category": parent_id
            })
        return result

    @task()
    def load_to_postgres(categories):
        pg_hook = PostgresHook(postgres_conn_id="source_postgres")
        conn = pg_hook.get_conn()
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS Emart_product (
                id integer primary key,
                Name varchar(225),
                cateroty_id varchar(255),
                Parent_category integer
            );             
        """)
        insert_sql = """
            INSERT INTO Emart_product (id, name, cateroty_id , Parent_category)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (id) DO NOTHING;
        """
        for cat in categories:
            cur.execute(insert_sql, (
                cat["id"],
                cat["name"],
                cat["route"],
                cat["category"]
            ))
        conn.commit()
        cur.close()
        conn.close()

    categories = extract_categories()
    load_to_postgres(categories)

category_etl()